//
// Generated file, do not edit! Created by opp_msgtool 6.0 from FeedbackPacket.msg.
//

#ifndef __FEEDBACKPACKET_M_H
#define __FEEDBACKPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class FeedbackPacket;
/**
 * Class generated from <tt>FeedbackPacket.msg:3</tt> by opp_msgtool.
 * <pre>
 * // FeedbackPacket.msg
 * message FeedbackPacket extends cPacket
 * {
 *     bool sendable = false;
 *     bool trySend = false;
 * }
 * </pre>
 */
class FeedbackPacket : public ::omnetpp::cPacket
{
  protected:
    bool sendable = false;
    bool trySend = false;

  private:
    void copy(const FeedbackPacket& other);

  protected:
    bool operator==(const FeedbackPacket&) = delete;

  public:
    FeedbackPacket(const char *name=nullptr, short kind=0);
    FeedbackPacket(const FeedbackPacket& other);
    virtual ~FeedbackPacket();
    FeedbackPacket& operator=(const FeedbackPacket& other);
    virtual FeedbackPacket *dup() const override {return new FeedbackPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual bool getSendable() const;
    virtual void setSendable(bool sendable);

    virtual bool getTrySend() const;
    virtual void setTrySend(bool trySend);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const FeedbackPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, FeedbackPacket& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline FeedbackPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<FeedbackPacket*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __FEEDBACKPACKET_M_H

