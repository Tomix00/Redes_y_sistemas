//
// Generated file, do not edit! Created by opp_msgtool 6.0 from FeedbackPacket.msg.
//

#ifndef __FEEDBACKPACKET_M_H
#define __FEEDBACKPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class FeedbackPacket;
/**
 * Class generated from <tt>FeedbackPacket.msg:3</tt> by opp_msgtool.
 * <pre>
 * // FeedbackPacket.msg
 * message FeedbackPacket extends cPacket
 * {
 *     simtime_t delay;
 *     int lastDestination;
 * 
 *     int source;
 *     int destination;
 *     int hopCount;
 *     int clockWay;      //Si es 1, el paquete esta siendo enviado y debe seguir siendo enviado en sentido horario y si es 0 en sentido antihorario.
 *     bool needFeedback;
 *     bool isFeedback;
 * }
 * </pre>
 */
class FeedbackPacket : public ::omnetpp::cPacket
{
  protected:
    omnetpp::simtime_t delay = SIMTIME_ZERO;
    int lastDestination = 0;
    int source = 0;
    int destination = 0;
    int hopCount = 0;
    int clockWay = 0;
    bool needFeedback = false;
    bool isFeedback_ = false;

  private:
    void copy(const FeedbackPacket& other);

  protected:
    bool operator==(const FeedbackPacket&) = delete;

  public:
    FeedbackPacket(const char *name=nullptr, short kind=0);
    FeedbackPacket(const FeedbackPacket& other);
    virtual ~FeedbackPacket();
    FeedbackPacket& operator=(const FeedbackPacket& other);
    virtual FeedbackPacket *dup() const override {return new FeedbackPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual omnetpp::simtime_t getDelay() const;
    virtual void setDelay(omnetpp::simtime_t delay);

    virtual int getLastDestination() const;
    virtual void setLastDestination(int lastDestination);

    virtual int getSource() const;
    virtual void setSource(int source);

    virtual int getDestination() const;
    virtual void setDestination(int destination);

    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);

    virtual int getClockWay() const;
    virtual void setClockWay(int clockWay);

    virtual bool getNeedFeedback() const;
    virtual void setNeedFeedback(bool needFeedback);

    virtual bool isFeedback() const;
    virtual void setIsFeedback(bool isFeedback);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const FeedbackPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, FeedbackPacket& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline FeedbackPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<FeedbackPacket*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __FEEDBACKPACKET_M_H

